// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String
  phone         String?
  password      String?  // For credentials provider
  emailVerified DateTime?
  image         String?
  role          UserRole @default(CLIENT)
  
  // Profile fields
  emergencyContactName  String?
  emergencyContactPhone String?
  emailNotifications    Boolean? @default(true)
  smsReminders         Boolean? @default(false)
  reminderTime         String? @default("24") // "24", "2", "1", "0.5" (hours)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  appointments       Appointment[]
  contactSubmissions ContactSubmission[]
  accounts           Account[]
  sessions           Session[]

  @@map("users")
}

model Service {
  id          String  @id @default(cuid())
  title       String
  description String
  duration    Int     // Duration in minutes
  price       Decimal @db.Money
  features    Json? 
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  appointments Appointment[]

  @@map("services")
}

model Appointment {
  id                String            @id @default(cuid())
  userId            String
  serviceId         String
  dateTime          DateTime
  status            AppointmentStatus @default(PENDING)
  notes             String?
  cancellationReason String?
  reminderSent      DateTime?
  confirmationSent  DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@index([dateTime, status])
  @@map("appointments")
}

model Availability {
  id        String  @id @default(cuid())
  dayOfWeek Int     // 0 = Sunday, 1 = Monday, etc.
  startTime String  // Format: "09:00"
  endTime   String  // Format: "17:00"
  isActive  Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("availability")
}

model BlockedSlot {
  id        String   @id @default(cuid())
  dateTime  DateTime
  duration  Int      // Duration in minutes
  reason    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([dateTime])
  @@map("blocked_slots")
}

model ContactSubmission {
  id        String   @id @default(cuid())
  userId    String?
  name      String
  email     String
  phone     String?
  subject   String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("contact_submissions")
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  excerpt     String
  content     String
  isPublished Boolean  @default(false)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tags BlogTag[]

  @@map("blog_posts")
}

model Tag {
  id   String @id @default(cuid())
  name String @unique

  blogTags BlogTag[]

  @@map("tags")
}

model BlogTag {
  blogPostId String
  tagId      String

  blogPost BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  tag      Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([blogPostId, tagId])
  @@map("blog_tags")
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum UserRole {
  CLIENT
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
